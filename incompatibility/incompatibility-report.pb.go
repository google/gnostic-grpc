// Copyright 2021 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.23.4
// source: incompatibility/incompatibility-report.proto

package incompatibility

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Severity level for an incompatibility
type Severity int32

const (
	Severity_Severity_Default Severity = 0
	Severity_INFO             Severity = 1
	Severity_WARNING          Severity = 2
	Severity_FAIL             Severity = 3
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "Severity_Default",
		1: "INFO",
		2: "WARNING",
		3: "FAIL",
	}
	Severity_value = map[string]int32{
		"Severity_Default": 0,
		"INFO":             1,
		"WARNING":          2,
		"FAIL":             3,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_incompatibility_incompatibility_report_proto_enumTypes[0].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_incompatibility_incompatibility_report_proto_enumTypes[0]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_incompatibility_incompatibility_report_proto_rawDescGZIP(), []int{0}
}

type IncompatibiltiyClassification int32

const (
	IncompatibiltiyClassification_IncompatibiltiyClassification_Default IncompatibiltiyClassification = 0
	IncompatibiltiyClassification_Security                              IncompatibiltiyClassification = 1
	IncompatibiltiyClassification_InvalidOperation                      IncompatibiltiyClassification = 2
	IncompatibiltiyClassification_ParameterStyling                      IncompatibiltiyClassification = 3
	IncompatibiltiyClassification_DataValidation                        IncompatibiltiyClassification = 4
	IncompatibiltiyClassification_InvalidDataState                      IncompatibiltiyClassification = 5
	IncompatibiltiyClassification_Inheritance                           IncompatibiltiyClassification = 6
	IncompatibiltiyClassification_ExternalTranscodingSupport            IncompatibiltiyClassification = 7
)

// Enum value maps for IncompatibiltiyClassification.
var (
	IncompatibiltiyClassification_name = map[int32]string{
		0: "IncompatibiltiyClassification_Default",
		1: "Security",
		2: "InvalidOperation",
		3: "ParameterStyling",
		4: "DataValidation",
		5: "InvalidDataState",
		6: "Inheritance",
		7: "ExternalTranscodingSupport",
	}
	IncompatibiltiyClassification_value = map[string]int32{
		"IncompatibiltiyClassification_Default": 0,
		"Security":                              1,
		"InvalidOperation":                      2,
		"ParameterStyling":                      3,
		"DataValidation":                        4,
		"InvalidDataState":                      5,
		"Inheritance":                           6,
		"ExternalTranscodingSupport":            7,
	}
)

func (x IncompatibiltiyClassification) Enum() *IncompatibiltiyClassification {
	p := new(IncompatibiltiyClassification)
	*p = x
	return p
}

func (x IncompatibiltiyClassification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IncompatibiltiyClassification) Descriptor() protoreflect.EnumDescriptor {
	return file_incompatibility_incompatibility_report_proto_enumTypes[1].Descriptor()
}

func (IncompatibiltiyClassification) Type() protoreflect.EnumType {
	return &file_incompatibility_incompatibility_report_proto_enumTypes[1]
}

func (x IncompatibiltiyClassification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IncompatibiltiyClassification.Descriptor instead.
func (IncompatibiltiyClassification) EnumDescriptor() ([]byte, []int) {
	return file_incompatibility_incompatibility_report_proto_rawDescGZIP(), []int{1}
}

// Base incompatibility structure in a file
type Incompatibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenPath      []string                      `protobuf:"bytes,1,rep,name=token_path,json=tokenPath,proto3" json:"token_path,omitempty"`                                              //unique path to incompatibility
	Classification IncompatibiltiyClassification `protobuf:"varint,2,opt,name=classification,proto3,enum=incompatibility.IncompatibiltiyClassification" json:"classification,omitempty"` // incomaptibility class.
	Severity       Severity                      `protobuf:"varint,3,opt,name=severity,proto3,enum=incompatibility.Severity" json:"severity,omitempty"`
}

func (x *Incompatibility) Reset() {
	*x = Incompatibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incompatibility_incompatibility_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Incompatibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Incompatibility) ProtoMessage() {}

func (x *Incompatibility) ProtoReflect() protoreflect.Message {
	mi := &file_incompatibility_incompatibility_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Incompatibility.ProtoReflect.Descriptor instead.
func (*Incompatibility) Descriptor() ([]byte, []int) {
	return file_incompatibility_incompatibility_report_proto_rawDescGZIP(), []int{0}
}

func (x *Incompatibility) GetTokenPath() []string {
	if x != nil {
		return x.TokenPath
	}
	return nil
}

func (x *Incompatibility) GetClassification() IncompatibiltiyClassification {
	if x != nil {
		return x.Classification
	}
	return IncompatibiltiyClassification_IncompatibiltiyClassification_Default
}

func (x *Incompatibility) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_Severity_Default
}

// Report of base incompatibilities
type IncompatibilityReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportIdentifier  string             `protobuf:"bytes,1,opt,name=reportIdentifier,proto3" json:"reportIdentifier,omitempty"`
	Incompatibilities []*Incompatibility `protobuf:"bytes,2,rep,name=incompatibilities,proto3" json:"incompatibilities,omitempty"`
}

func (x *IncompatibilityReport) Reset() {
	*x = IncompatibilityReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incompatibility_incompatibility_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncompatibilityReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncompatibilityReport) ProtoMessage() {}

func (x *IncompatibilityReport) ProtoReflect() protoreflect.Message {
	mi := &file_incompatibility_incompatibility_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncompatibilityReport.ProtoReflect.Descriptor instead.
func (*IncompatibilityReport) Descriptor() ([]byte, []int) {
	return file_incompatibility_incompatibility_report_proto_rawDescGZIP(), []int{1}
}

func (x *IncompatibilityReport) GetReportIdentifier() string {
	if x != nil {
		return x.ReportIdentifier
	}
	return ""
}

func (x *IncompatibilityReport) GetIncompatibilities() []*Incompatibility {
	if x != nil {
		return x.Incompatibilities
	}
	return nil
}

// Detailed structure of an incompatibility in a file
type IncompatibilityDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File position
	Line   int32 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column int32 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	// string token
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// classification
	Class IncompatibiltiyClassification `protobuf:"varint,5,opt,name=class,proto3,enum=incompatibility.IncompatibiltiyClassification" json:"class,omitempty"`
	// hint to describe incompatibility
	Hint string `protobuf:"bytes,6,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *IncompatibilityDescription) Reset() {
	*x = IncompatibilityDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incompatibility_incompatibility_report_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncompatibilityDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncompatibilityDescription) ProtoMessage() {}

func (x *IncompatibilityDescription) ProtoReflect() protoreflect.Message {
	mi := &file_incompatibility_incompatibility_report_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncompatibilityDescription.ProtoReflect.Descriptor instead.
func (*IncompatibilityDescription) Descriptor() ([]byte, []int) {
	return file_incompatibility_incompatibility_report_proto_rawDescGZIP(), []int{2}
}

func (x *IncompatibilityDescription) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *IncompatibilityDescription) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *IncompatibilityDescription) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *IncompatibilityDescription) GetClass() IncompatibiltiyClassification {
	if x != nil {
		return x.Class
	}
	return IncompatibiltiyClassification_IncompatibiltiyClassification_Default
}

func (x *IncompatibilityDescription) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

// Report of incompatibility descriptions
type FileDescriptiveReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportIdentifier  string                        `protobuf:"bytes,1,opt,name=reportIdentifier,proto3" json:"reportIdentifier,omitempty"`
	Incompatibilities []*IncompatibilityDescription `protobuf:"bytes,2,rep,name=incompatibilities,proto3" json:"incompatibilities,omitempty"`
}

func (x *FileDescriptiveReport) Reset() {
	*x = FileDescriptiveReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incompatibility_incompatibility_report_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDescriptiveReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDescriptiveReport) ProtoMessage() {}

func (x *FileDescriptiveReport) ProtoReflect() protoreflect.Message {
	mi := &file_incompatibility_incompatibility_report_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDescriptiveReport.ProtoReflect.Descriptor instead.
func (*FileDescriptiveReport) Descriptor() ([]byte, []int) {
	return file_incompatibility_incompatibility_report_proto_rawDescGZIP(), []int{3}
}

func (x *FileDescriptiveReport) GetReportIdentifier() string {
	if x != nil {
		return x.ReportIdentifier
	}
	return ""
}

func (x *FileDescriptiveReport) GetIncompatibilities() []*IncompatibilityDescription {
	if x != nil {
		return x.Incompatibilities
	}
	return nil
}

type FileIncompatibilityClassificationAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumOccurrences int32 `protobuf:"varint,1,opt,name=num_occurrences,json=numOccurrences,proto3" json:"num_occurrences,omitempty"`
}

func (x *FileIncompatibilityClassificationAnalysis) Reset() {
	*x = FileIncompatibilityClassificationAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incompatibility_incompatibility_report_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileIncompatibilityClassificationAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileIncompatibilityClassificationAnalysis) ProtoMessage() {}

func (x *FileIncompatibilityClassificationAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_incompatibility_incompatibility_report_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileIncompatibilityClassificationAnalysis.ProtoReflect.Descriptor instead.
func (*FileIncompatibilityClassificationAnalysis) Descriptor() ([]byte, []int) {
	return file_incompatibility_incompatibility_report_proto_rawDescGZIP(), []int{4}
}

func (x *FileIncompatibilityClassificationAnalysis) GetNumOccurrences() int32 {
	if x != nil {
		return x.NumOccurrences
	}
	return 0
}

// Aggregated information about an incompatibility in a set
type IncompatibilityAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncompatibilityClass IncompatibiltiyClassification                         `protobuf:"varint,1,opt,name=incompatibility_class,json=incompatibilityClass,proto3,enum=incompatibility.IncompatibiltiyClassification" json:"incompatibility_class,omitempty"`
	CountPerFile         map[string]*FileIncompatibilityClassificationAnalysis `protobuf:"bytes,2,rep,name=count_per_file,json=countPerFile,proto3" json:"count_per_file,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IncompatibilityAnalysis) Reset() {
	*x = IncompatibilityAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incompatibility_incompatibility_report_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncompatibilityAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncompatibilityAnalysis) ProtoMessage() {}

func (x *IncompatibilityAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_incompatibility_incompatibility_report_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncompatibilityAnalysis.ProtoReflect.Descriptor instead.
func (*IncompatibilityAnalysis) Descriptor() ([]byte, []int) {
	return file_incompatibility_incompatibility_report_proto_rawDescGZIP(), []int{5}
}

func (x *IncompatibilityAnalysis) GetIncompatibilityClass() IncompatibiltiyClassification {
	if x != nil {
		return x.IncompatibilityClass
	}
	return IncompatibiltiyClassification_IncompatibiltiyClassification_Default
}

func (x *IncompatibilityAnalysis) GetCountPerFile() map[string]*FileIncompatibilityClassificationAnalysis {
	if x != nil {
		return x.CountPerFile
	}
	return nil
}

// Aggregation of incompatibility scanning across a set
type ApiSetIncompatibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenApiFiles               int32                      `protobuf:"varint,1,opt,name=open_api_files,json=openApiFiles,proto3" json:"open_api_files,omitempty"`
	IncompatibleFiles          int32                      `protobuf:"varint,2,opt,name=incompatible_files,json=incompatibleFiles,proto3" json:"incompatible_files,omitempty"`
	AnalysisPerIncompatibility []*IncompatibilityAnalysis `protobuf:"bytes,3,rep,name=analysis_per_incompatibility,json=analysisPerIncompatibility,proto3" json:"analysis_per_incompatibility,omitempty"`
}

func (x *ApiSetIncompatibility) Reset() {
	*x = ApiSetIncompatibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incompatibility_incompatibility_report_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiSetIncompatibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiSetIncompatibility) ProtoMessage() {}

func (x *ApiSetIncompatibility) ProtoReflect() protoreflect.Message {
	mi := &file_incompatibility_incompatibility_report_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiSetIncompatibility.ProtoReflect.Descriptor instead.
func (*ApiSetIncompatibility) Descriptor() ([]byte, []int) {
	return file_incompatibility_incompatibility_report_proto_rawDescGZIP(), []int{6}
}

func (x *ApiSetIncompatibility) GetOpenApiFiles() int32 {
	if x != nil {
		return x.OpenApiFiles
	}
	return 0
}

func (x *ApiSetIncompatibility) GetIncompatibleFiles() int32 {
	if x != nil {
		return x.IncompatibleFiles
	}
	return 0
}

func (x *ApiSetIncompatibility) GetAnalysisPerIncompatibility() []*IncompatibilityAnalysis {
	if x != nil {
		return x.AnalysisPerIncompatibility
	}
	return nil
}

var File_incompatibility_incompatibility_report_proto protoreflect.FileDescriptor

var file_incompatibility_incompatibility_report_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22,
	0xbf, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x74, 0x69, 0x79, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x74, 0x69, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69,
	0x6e, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x29, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x4f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xdd, 0x02, 0x0a, 0x17, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x63, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x69, 0x6c, 0x74, 0x69, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x60, 0x0a, 0x0e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x7b, 0x0a, 0x11,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x01, 0x0a, 0x15, 0x41, 0x70,
	0x69, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x70, 0x65,
	0x6e, 0x41, 0x70, 0x69, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x1c, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x1a, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2a, 0x41, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x2a, 0xdf, 0x01, 0x0a, 0x1d, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x74, 0x69, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x74, 0x69, 0x79, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x07, 0x42, 0x14, 0x5a, 0x12, 0x2e, 0x2e, 0x2f,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_incompatibility_incompatibility_report_proto_rawDescOnce sync.Once
	file_incompatibility_incompatibility_report_proto_rawDescData = file_incompatibility_incompatibility_report_proto_rawDesc
)

func file_incompatibility_incompatibility_report_proto_rawDescGZIP() []byte {
	file_incompatibility_incompatibility_report_proto_rawDescOnce.Do(func() {
		file_incompatibility_incompatibility_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_incompatibility_incompatibility_report_proto_rawDescData)
	})
	return file_incompatibility_incompatibility_report_proto_rawDescData
}

var file_incompatibility_incompatibility_report_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_incompatibility_incompatibility_report_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_incompatibility_incompatibility_report_proto_goTypes = []interface{}{
	(Severity)(0),                                     // 0: incompatibility.Severity
	(IncompatibiltiyClassification)(0),                // 1: incompatibility.IncompatibiltiyClassification
	(*Incompatibility)(nil),                           // 2: incompatibility.Incompatibility
	(*IncompatibilityReport)(nil),                     // 3: incompatibility.IncompatibilityReport
	(*IncompatibilityDescription)(nil),                // 4: incompatibility.IncompatibilityDescription
	(*FileDescriptiveReport)(nil),                     // 5: incompatibility.FileDescriptiveReport
	(*FileIncompatibilityClassificationAnalysis)(nil), // 6: incompatibility.FileIncompatibilityClassificationAnalysis
	(*IncompatibilityAnalysis)(nil),                   // 7: incompatibility.IncompatibilityAnalysis
	(*ApiSetIncompatibility)(nil),                     // 8: incompatibility.ApiSetIncompatibility
	nil,                                               // 9: incompatibility.IncompatibilityAnalysis.CountPerFileEntry
}
var file_incompatibility_incompatibility_report_proto_depIdxs = []int32{
	1, // 0: incompatibility.Incompatibility.classification:type_name -> incompatibility.IncompatibiltiyClassification
	0, // 1: incompatibility.Incompatibility.severity:type_name -> incompatibility.Severity
	2, // 2: incompatibility.IncompatibilityReport.incompatibilities:type_name -> incompatibility.Incompatibility
	1, // 3: incompatibility.IncompatibilityDescription.class:type_name -> incompatibility.IncompatibiltiyClassification
	4, // 4: incompatibility.FileDescriptiveReport.incompatibilities:type_name -> incompatibility.IncompatibilityDescription
	1, // 5: incompatibility.IncompatibilityAnalysis.incompatibility_class:type_name -> incompatibility.IncompatibiltiyClassification
	9, // 6: incompatibility.IncompatibilityAnalysis.count_per_file:type_name -> incompatibility.IncompatibilityAnalysis.CountPerFileEntry
	7, // 7: incompatibility.ApiSetIncompatibility.analysis_per_incompatibility:type_name -> incompatibility.IncompatibilityAnalysis
	6, // 8: incompatibility.IncompatibilityAnalysis.CountPerFileEntry.value:type_name -> incompatibility.FileIncompatibilityClassificationAnalysis
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_incompatibility_incompatibility_report_proto_init() }
func file_incompatibility_incompatibility_report_proto_init() {
	if File_incompatibility_incompatibility_report_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_incompatibility_incompatibility_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Incompatibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incompatibility_incompatibility_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncompatibilityReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incompatibility_incompatibility_report_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncompatibilityDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incompatibility_incompatibility_report_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDescriptiveReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incompatibility_incompatibility_report_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileIncompatibilityClassificationAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incompatibility_incompatibility_report_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncompatibilityAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incompatibility_incompatibility_report_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiSetIncompatibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_incompatibility_incompatibility_report_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_incompatibility_incompatibility_report_proto_goTypes,
		DependencyIndexes: file_incompatibility_incompatibility_report_proto_depIdxs,
		EnumInfos:         file_incompatibility_incompatibility_report_proto_enumTypes,
		MessageInfos:      file_incompatibility_incompatibility_report_proto_msgTypes,
	}.Build()
	File_incompatibility_incompatibility_report_proto = out.File
	file_incompatibility_incompatibility_report_proto_rawDesc = nil
	file_incompatibility_incompatibility_report_proto_goTypes = nil
	file_incompatibility_incompatibility_report_proto_depIdxs = nil
}
