// Copyright 2017 Google LLC. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: incompatibility-report.proto

package incompatibility

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Severity int32

const (
	Severity_INFO Severity = 0
	Severity_FAIL Severity = 1
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "INFO",
		1: "FAIL",
	}
	Severity_value = map[string]int32{
		"INFO": 0,
		"FAIL": 1,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_incompatibility_report_proto_enumTypes[0].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_incompatibility_report_proto_enumTypes[0]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_incompatibility_report_proto_rawDescGZIP(), []int{0}
}

type Incompatibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token          string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Classification string `protobuf:"bytes,2,opt,name=classification,proto3" json:"classification,omitempty"`
}

func (x *Incompatibility) Reset() {
	*x = Incompatibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incompatibility_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Incompatibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Incompatibility) ProtoMessage() {}

func (x *Incompatibility) ProtoReflect() protoreflect.Message {
	mi := &file_incompatibility_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Incompatibility.ProtoReflect.Descriptor instead.
func (*Incompatibility) Descriptor() ([]byte, []int) {
	return file_incompatibility_report_proto_rawDescGZIP(), []int{0}
}

func (x *Incompatibility) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Incompatibility) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

type IncompatibilityReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Incompatibilities []*Incompatibility `protobuf:"bytes,1,rep,name=incompatibilities,proto3" json:"incompatibilities,omitempty"`
}

func (x *IncompatibilityReport) Reset() {
	*x = IncompatibilityReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incompatibility_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncompatibilityReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncompatibilityReport) ProtoMessage() {}

func (x *IncompatibilityReport) ProtoReflect() protoreflect.Message {
	mi := &file_incompatibility_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncompatibilityReport.ProtoReflect.Descriptor instead.
func (*IncompatibilityReport) Descriptor() ([]byte, []int) {
	return file_incompatibility_report_proto_rawDescGZIP(), []int{1}
}

func (x *IncompatibilityReport) GetIncompatibilities() []*Incompatibility {
	if x != nil {
		return x.Incompatibilities
	}
	return nil
}

type FormattedIncompatibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line                 int32    `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column               int32    `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Hint                 string   `protobuf:"bytes,4,opt,name=hint,proto3" json:"hint,omitempty"`
	IncompatibilityLevel Severity `protobuf:"varint,5,opt,name=incompatibility_level,json=incompatibilityLevel,proto3,enum=incompatibility.Severity" json:"incompatibility_level,omitempty"`
}

func (x *FormattedIncompatibility) Reset() {
	*x = FormattedIncompatibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incompatibility_report_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormattedIncompatibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormattedIncompatibility) ProtoMessage() {}

func (x *FormattedIncompatibility) ProtoReflect() protoreflect.Message {
	mi := &file_incompatibility_report_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormattedIncompatibility.ProtoReflect.Descriptor instead.
func (*FormattedIncompatibility) Descriptor() ([]byte, []int) {
	return file_incompatibility_report_proto_rawDescGZIP(), []int{2}
}

func (x *FormattedIncompatibility) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *FormattedIncompatibility) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *FormattedIncompatibility) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *FormattedIncompatibility) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

func (x *FormattedIncompatibility) GetIncompatibilityLevel() Severity {
	if x != nil {
		return x.IncompatibilityLevel
	}
	return Severity_INFO
}

type FormattedIncompatibilityReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Incompatibilities []*FormattedIncompatibility `protobuf:"bytes,1,rep,name=incompatibilities,proto3" json:"incompatibilities,omitempty"`
}

func (x *FormattedIncompatibilityReport) Reset() {
	*x = FormattedIncompatibilityReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incompatibility_report_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormattedIncompatibilityReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormattedIncompatibilityReport) ProtoMessage() {}

func (x *FormattedIncompatibilityReport) ProtoReflect() protoreflect.Message {
	mi := &file_incompatibility_report_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormattedIncompatibilityReport.ProtoReflect.Descriptor instead.
func (*FormattedIncompatibilityReport) Descriptor() ([]byte, []int) {
	return file_incompatibility_report_proto_rawDescGZIP(), []int{3}
}

func (x *FormattedIncompatibilityReport) GetIncompatibilities() []*FormattedIncompatibility {
	if x != nil {
		return x.Incompatibilities
	}
	return nil
}

type Analysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenApiFiles             int32            `protobuf:"varint,1,opt,name=open_api_files,json=openApiFiles,proto3" json:"open_api_files,omitempty"`
	IncompatibleFiles        int32            `protobuf:"varint,2,opt,name=incompatible_files,json=incompatibleFiles,proto3" json:"incompatible_files,omitempty"`
	IncompatibilityFileCount map[string]int32 `protobuf:"bytes,3,rep,name=incompatibility_file_count,json=incompatibilityFileCount,proto3" json:"incompatibility_file_count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Analysis) Reset() {
	*x = Analysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_incompatibility_report_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Analysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Analysis) ProtoMessage() {}

func (x *Analysis) ProtoReflect() protoreflect.Message {
	mi := &file_incompatibility_report_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Analysis.ProtoReflect.Descriptor instead.
func (*Analysis) Descriptor() ([]byte, []int) {
	return file_incompatibility_report_proto_rawDescGZIP(), []int{4}
}

func (x *Analysis) GetOpenApiFiles() int32 {
	if x != nil {
		return x.OpenApiFiles
	}
	return 0
}

func (x *Analysis) GetIncompatibleFiles() int32 {
	if x != nil {
		return x.IncompatibleFiles
	}
	return 0
}

func (x *Analysis) GetIncompatibilityFileCount() map[string]int32 {
	if x != nil {
		return x.IncompatibilityFileCount
	}
	return nil
}

var File_incompatibility_report_proto protoreflect.FileDescriptor

var file_incompatibility_report_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22,
	0x4f, 0x0a, 0x0f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x67, 0x0a, 0x15, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4e, 0x0a, 0x11, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x18, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x15,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x79, 0x0a, 0x1e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x57,
	0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xa3, 0x02, 0x0a, 0x08, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x70,
	0x65, 0x6e, 0x41, 0x70, 0x69, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x1a, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x4b, 0x0a, 0x1d, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x1e, 0x0a,
	0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x42, 0x2b, 0x5a,
	0x29, 0x2e, 0x2e, 0x2f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x3b, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_incompatibility_report_proto_rawDescOnce sync.Once
	file_incompatibility_report_proto_rawDescData = file_incompatibility_report_proto_rawDesc
)

func file_incompatibility_report_proto_rawDescGZIP() []byte {
	file_incompatibility_report_proto_rawDescOnce.Do(func() {
		file_incompatibility_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_incompatibility_report_proto_rawDescData)
	})
	return file_incompatibility_report_proto_rawDescData
}

var file_incompatibility_report_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_incompatibility_report_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_incompatibility_report_proto_goTypes = []interface{}{
	(Severity)(0),                          // 0: incompatibility.Severity
	(*Incompatibility)(nil),                // 1: incompatibility.Incompatibility
	(*IncompatibilityReport)(nil),          // 2: incompatibility.IncompatibilityReport
	(*FormattedIncompatibility)(nil),       // 3: incompatibility.FormattedIncompatibility
	(*FormattedIncompatibilityReport)(nil), // 4: incompatibility.FormattedIncompatibilityReport
	(*Analysis)(nil),                       // 5: incompatibility.Analysis
	nil,                                    // 6: incompatibility.Analysis.IncompatibilityFileCountEntry
}
var file_incompatibility_report_proto_depIdxs = []int32{
	1, // 0: incompatibility.IncompatibilityReport.incompatibilities:type_name -> incompatibility.Incompatibility
	0, // 1: incompatibility.FormattedIncompatibility.incompatibility_level:type_name -> incompatibility.Severity
	3, // 2: incompatibility.FormattedIncompatibilityReport.incompatibilities:type_name -> incompatibility.FormattedIncompatibility
	6, // 3: incompatibility.Analysis.incompatibility_file_count:type_name -> incompatibility.Analysis.IncompatibilityFileCountEntry
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_incompatibility_report_proto_init() }
func file_incompatibility_report_proto_init() {
	if File_incompatibility_report_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_incompatibility_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Incompatibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incompatibility_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncompatibilityReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incompatibility_report_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormattedIncompatibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incompatibility_report_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormattedIncompatibilityReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_incompatibility_report_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Analysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_incompatibility_report_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_incompatibility_report_proto_goTypes,
		DependencyIndexes: file_incompatibility_report_proto_depIdxs,
		EnumInfos:         file_incompatibility_report_proto_enumTypes,
		MessageInfos:      file_incompatibility_report_proto_msgTypes,
	}.Build()
	File_incompatibility_report_proto = out.File
	file_incompatibility_report_proto_rawDesc = nil
	file_incompatibility_report_proto_goTypes = nil
	file_incompatibility_report_proto_depIdxs = nil
}
